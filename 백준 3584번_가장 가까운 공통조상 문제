import java.util.*;
import java.io.*;

public class Main {
    static int T, N;
    static int[] parent;
    static boolean[] visited;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        T = Integer.parseInt(br.readLine());

        while (T-- > 0) {
            N = Integer.parseInt(br.readLine());
            parent = new int[N + 1];
            visited = new boolean[N + 1];

            for (int i = 0; i < N - 1; i++) {
                StringTokenizer st = new StringTokenizer(br.readLine());
                int p = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                parent[c] = p;
            }

            StringTokenizer st = new StringTokenizer(br.readLine());
            int node1 = Integer.parseInt(st.nextToken());
            int node2 = Integer.parseInt(st.nextToken());

            System.out.println(lca(node1, node2));
        }
    }

    static int lca(int a, int b) {
        // a의 조상들을 모두 체크
        Arrays.fill(visited, false);
        while (a != 0) {
            visited[a] = true;
            a = parent[a];
        }

        // b의 조상을 타고 올라가면서 a에서 체크한 조상이면 리턴
        while (b != 0) {
            if (visited[b]) {
                return b;
            }
            b = parent[b];
        }

        return 0; // 기본적으로 이 상황은 없음
    }
}
